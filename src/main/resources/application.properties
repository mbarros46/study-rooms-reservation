# ===== Server =====
server.port=8080

# ===== Datasource (use envs em produção) =====
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/studyrooms}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASS:postgres}
spring.datasource.driver-class-name=org.postgresql.Driver

# ===== JPA/Hibernate =====
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

# ===== Thymeleaf =====
spring.thymeleaf.cache=false

# ===== Flyway =====
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration

# ===== Security + OAuth2 =====
# GitHub OAuth
spring.security.oauth2.client.registration.github.client-id=${GITHUB_ID:changeme}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_SECRET:changeme}
spring.security.oauth2.client.registration.github.scope=read:user,user:email
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id

# Google OAuth (alternativa)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:changeme}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:changeme}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.provider.google.issuer-uri=https://accounts.google.com